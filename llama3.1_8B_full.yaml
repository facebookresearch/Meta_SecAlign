# Config for multi-device full DPO alignment in full_dpo_distributed.py
# using a Llama3.1 8B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Meta-Llama-3.1-8B-Instruct --output-dir /tmp/Meta-Llama-3.1-8B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 4 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 4 full_dpo_distributed --config llama3.1_8B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 4 full_dpo_distributed --config llama3.1_8B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#

output_dir: /tmp/llama3_1_8B/full_dpo # /tmp may be deleted by your system. Change it to your preference.
base_dir: BASE_DIR_PLACEHOLDER # Change this to your base directory where the model is stored
wand_entity: WANDB_ENTITY_PLACEHOLDER # Change this to your WandB entity

# Model Arguments
model:
  _component_: torchtune.models.llama3_1.llama3_1_8b

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${base_dir}/meta-llama/Meta-Llama-3.1-8B-Instruct/original/tokenizer.model
  max_seq_len: 2048 # higher increases memory

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_dir}/meta-llama/Meta-Llama-3.1-8B-Instruct/
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False

# The ref_checkpointer should always point to the original weights.
ref_checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_dir}/meta-llama/Meta-Llama-3.1-8B-Instruct/
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.preference_dataset
  source: json
  data_files: data/preference_Llama-3.1-8B-Instruct_dpo_NaiveCompletion_randpos_synthetic_alpaca.json
  packed: False  # True increases speed
  split: train
seed: null
shuffle: True

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.0
  lr: 1.0e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 0

loss:
  _component_: torchtune.rlhf.loss.DPOLoss
  beta: 0.1  # default value is 0.1
  label_smoothing: 0  # default value is 0

# Training
epochs: 1
batch_size: 2
max_steps_per_epoch: null
gradient_accumulation_steps: 16  # Use to increase effective batch size
clip_grad_norm: 1.0  # Gradient clipping to avoid exploding gradients
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: secalign
  entity: ${wand_entity}
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.

# Environment
device: cuda
dtype: bf16

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: True  # True reduces memory
