# Config for multi-device full finetuning in full_dpo_distributed.py
# using a Llama4 17Bx16E MoE model
#
# This config assumes that you've run the following command before launching
# this run:
#   ttune download meta-llama/Llama-4-Scout-17B-16E-Instruct --output-dir /tmp/Llama-4-Scout-17B-16E-Instruct
#
# To launch on 8 devices, run the following command from root:
#   tune run --nproc_per_node 8 full_dpo_distributed --config llama4_scout_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 8 full_dpo_distributed --config llama4_scout_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config is only tested on an 8xH200 machine.
#

output_dir: /tmp/torchtune/llama4_scout/full_dpo # /tmp may be deleted by your system. Change it to your preference.
base_dir: BASE_DIR_PLACEHOLDER # Change this to your base directory where the model is stored
wand_entity: WANDB_ENTITY_PLACEHOLDER # Change this to your WandB entity

# Parallelism
# tensor_parallel_dim: 1
# tensor_parallel_plan:
#   _component_: torchtune.models.llama3.base_llama_tp_plan

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama4.llama4_transform
  path: ${base_dir}/meta-llama/Llama-4-Scout-17B-16E-Instruct/tokenizer.model
  max_seq_len: 1024 # higher increases memory

# Model Arguments
model:
  _component_: torchtune.models.llama4.llama4_scout_17b_16e

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_dir}/meta-llama/Llama-4-Scout-17B-16E-Instruct/
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00050"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA4

# The ref_checkpointer should always point to the original weights.
ref_checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_dir}/meta-llama/Llama-4-Scout-17B-16E-Instruct/
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00050"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA4

resume_from_checkpoint: False
# enable_async_checkpointing: True

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.preference_dataset
  source: json
  # data_files: data/preference_Llama-3.3-70B-Instruct_dpo_NaiveCompletion_randpos_synthetic_alpaca.json
  data_files: data/preference_Llama-4-Scout-17B-16E-Instruct_randpos1_randturn0_selflabel1_alpaca.json
  packed: False  # True increases speed
  split: train
seed: null
shuffle: True

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.0
  lr: 1.2e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 0

loss:
  _component_: torchtune.rlhf.loss.DPOLoss
  beta: 0.1  # default value is 0.1
  label_smoothing: 0  # default value is 0

# Training
epochs: 1
batch_size: 1
max_steps_per_epoch: null
gradient_accumulation_steps: 32  # Use to increase effective batch size
clip_grad_norm: 1.0

# Memory management
device: cuda
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: True  # True reduces memory
# custom_sharded_layers: ['tok_embeddings', 'output']  # Layers to shard separately (useful for large vocab size models). Lower Memory, but lower speed.
fsdp_cpu_offload: False  # True offloads FSDP parameters to CPU, reducing GPU memory usage
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: secalign
  entity: ${wand_entity}
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.



# (disabled) Useful for understanding how to optimize memory and performance
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False
